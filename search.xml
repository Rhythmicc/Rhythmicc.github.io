<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为Mac打造终极菜单栏</title>
      <link href="/2020/02/20/MacMenu/"/>
      <url>/2020/02/20/MacMenu/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>工具</th><th>介绍</th></tr></thead><tbody><tr><td><a href="https://getbitbar.com/" target="_blank" rel="noopener">BitBar</a></td><td>在菜单栏运行自己写的脚本</td></tr><tr><td><a href="https://bjango.com/mac/istatmenus/" target="_blank" rel="noopener">iStat Menu</a></td><td>大名鼎鼎的IStat Menu，不过需要付钱</td></tr><tr><td><a href="https://matthewpalmer.net/vanilla/" target="_blank" rel="noopener">Vanilla</a></td><td>隐藏一些没用的菜单栏图标</td></tr></tbody></table><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><ul><li>关闭Vanilla状态：</li></ul><p><a href="https://vip1.loli.net/2020/02/20/tSiXpFAMzZWHKIe.png" data-fancybox="group" data-caption="On" class="fancybox"><img alt="On" data-src="https://vip1.loli.net/2020/02/20/tSiXpFAMzZWHKIe.png" class="lazyload" title="On"></a></p><ul><li>开启Vanilla状态：</li></ul><p><a href="https://vip1.loli.net/2020/02/20/ulMk6GOzLPAwBro.png" data-fancybox="group" data-caption="Off" class="fancybox"><img alt="Off" data-src="https://vip1.loli.net/2020/02/20/ulMk6GOzLPAwBro.png" class="lazyload" title="Off"></a></p><h2 id="BitBar"><a href="#BitBar" class="headerlink" title="BitBar"></a>BitBar</h2><ul><li>具体安装方式可以参照<a href="https://rhythmlian.cn/2020/02/18/bitbar/">我的博客</a></li></ul><h2 id="iStat-Menu"><a href="#iStat-Menu" class="headerlink" title="iStat Menu"></a>iStat Menu</h2><ul><li><p><strong>不推荐</strong>从APP Store上下载，直接去官网下载免费版，需要激活就去淘宝买激活码~</p></li><li><p>iStat Menu的天气数据是从<a href="https://darksky.net/" target="_blank" rel="noopener">Dark Sky</a>获取的，你可以申请免费的API，再利用BitBar实现相应功能，无需付费</p><ul><li>配置好BitBar后，将<code>bitbar-plugins/weather/weather.15m.py</code>复制到<code>BitBar工作目录</code></li><li>在<code>weather.15m.py</code>填入你申请的API ID</li><li>如果你想使用我的天气脚本，请点击：<a href="https://rhythmlian.cn/weather.15m.py">weather.15m.py</a></li></ul></li><li><p>可能浏览器下载速度比较慢，你可以运行命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qs -dl https://files.bjango.com/istatmenus6/istatmenus6.40.zip</span><br></pre></td></tr></tbody></table></figure></div><p>（使用多线程下载）</p></li></ul><h2 id="Vanilla"><a href="#Vanilla" class="headerlink" title="Vanilla"></a>Vanilla</h2><ul><li><p>Vanilla是一款隐藏菜单图标的APP，可以免费使用，也可以花<code>不到5刀</code>解锁<code>Pro</code>版本~</p></li><li><p>不过大陆付费的话，只能用visa</p></li><li><p>下载：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qs -dl https://macrelease.matthewpalmer.net/Vanilla.dmg</span><br></pre></td></tr></tbody></table></figure></div></li></ul><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li><code>qs</code>: <a href="https://pypi.org/project/QuickStart-Rhy/" target="_blank" rel="noopener">QuickStart-Rhy</a>, qs -dl支持断点续下，如果下载进度停滞不动，你可以结束这个进程并重新运行</li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BitBar安装与配置</title>
      <link href="/2020/02/18/bitbar/"/>
      <url>/2020/02/18/bitbar/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>​    由于疫情原因，只能在家安装这玩意，昨天折腾一晚上，终于整好了。</p><p>​    BitBar安装其实很简单，你只需要：<code>brew cask install bitbar</code></p><p>​    但奈何它的release发布在了GitHub上，全速下载半小时，到了4%静止不动。。我意识到这玩意不能通过brew安装。</p><p>​    后来我尝试了浏览器直接下载、多线程下载工具、科学上网下载全都失败。。你做个人？</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>如果你也像我一样被<strong>毒瘤亚马逊云</strong>恶心一晚上，不妨试试通过云服务器下载，再利用ssh把包从服务器上拉取下来。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh your_user_name@your_ip <span class="comment"># 登录服务器</span></span><br><span class="line">wget https://github.com/matryer/bitbar/releases/download/v1.9.2/BitBar-v1.9.2.zip <span class="comment"># 下载</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出服务器</span></span><br><span class="line">scp your_user_name@your_ip:Download_dir/BitBar-v1.9.2.zip BitBar-v1.9.2.zip <span class="comment"># 拉取zip包</span></span><br><span class="line">qs -unzip BitBar-v1.9.2.zip <span class="comment"># 解压</span></span><br></pre></td></tr></tbody></table></figure></div><ul><li>如果你的电脑能正常使用<a href="https://pypi.org/project/Qpro/" target="_blank" rel="noopener">Qpro</a></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qpro -ssh <span class="comment"># 登录服务器</span></span><br><span class="line">wget https://github.com/matryer/bitbar/releases/download/v1.9.2/BitBar-v1.9.2.zip <span class="comment"># 下载</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出服务器</span></span><br><span class="line">qpro -scp BitBar-v1.9.2.zip <span class="comment"># 拉取zip包</span></span><br><span class="line">qs -unzip BitBar-v1.9.2.zip <span class="comment"># 解压</span></span><br></pre></td></tr></tbody></table></figure></div><p>这个方法经过测试，可以达到<code>20kb/s</code>，还算是很乐观了~</p><p>不过这还是很麻烦，你可以直接点击<a href="https://rhythmlian.cn/BitBar.zip">BitBar</a>下载~</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>开始运行BitBar以后，你的菜单栏上会冒出个：<code>BitBar</code>，这时候你需要先在合适的地方创构建一个空文件夹比如<code>BitBar_Plugins</code>，然后点击菜单栏上的<code>BitBar</code>选择<code>Change Plugin Folder</code>，将刚才创建的空文件夹选中。</p></li><li><p>此时，<code>BitBar_Plugins</code>就是存放菜单栏脚本的目录了，你可以添加BitBar官方推荐的脚本，也可以自己写一个定时执行的脚本。</p><ul><li><p>BitBar推荐脚本</p><p>事实上，直接通过官网安装是很低效的，你可以利用git把官网上所有的脚本都下载下来，再把<code>.git</code>文件夹删掉，其实脚本库一共就<code>3.4M</code>。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/matryer/bitbar-plugins.git</span><br><span class="line"><span class="built_in">cd</span> bitbar-plugins</span><br><span class="line">rm -rf .git</span><br></pre></td></tr></tbody></table></figure></div><p>下载好后，在<a href="https://getbitbar.com/" target="_blank" rel="noopener">官网</a>翻阅你感兴趣的脚本，并把它从<code>bitbar-plugins</code>复制到<code>BitBar_Plugins</code>就好。</p></li><li><p>自定义脚本</p><p>如果你想自己写一个菜单栏脚本，你可以创建一个<code>{name}.{time}.{ext}</code>文件</p><ul><li><code>name</code> - 脚本名称</li><li><code>time</code> - 执行时间间隔</li><li><code>ext</code>   - 文件类型</li></ul><p>比如：</p><ul><li><code>date.1m.sh</code>将会每隔一分钟执行一次</li></ul><p>时间格式</p><table><thead><tr><th align="center">时间</th><th align="center">格式</th></tr></thead><tbody><tr><td align="center">秒</td><td align="center">s</td></tr><tr><td align="center">分钟</td><td align="center">m</td></tr><tr><td align="center">小时</td><td align="center">h</td></tr><tr><td align="center">天</td><td align="center">d</td></tr></tbody></table></li></ul></li></ul><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><ul><li><code>ColorfulBatteryLevel.5s.sh</code></li><li><code>weather.15m.py</code></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 攻略 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国石油大学（北京）考试查询脚本</title>
      <link href="/2020/02/16/cup-exam/"/>
      <url>/2020/02/16/cup-exam/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="中国石油大学（北京）考试查询脚本"><a href="#中国石油大学（北京）考试查询脚本" class="headerlink" title="中国石油大学（北京）考试查询脚本"></a>中国石油大学（北京）考试查询脚本</h2><h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><ul><li><p>CUP-EXAM基于<code>python::3</code>开发，为此，你需要安装<code>python >= 3.6</code>环境。</p></li><li><p>Python安装</p><ul><li><strong>推荐官网</strong>：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">python.org</a></li><li>Ubuntu：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update <span class="comment"># 初次运行apt需要带上这条命令</span></span><br><span class="line">sudo apt-get install python3</span><br></pre></td></tr></tbody></table></figure></div><ul><li>CentOS：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python3</span><br></pre></td></tr></tbody></table></figure></div></li><li><p>安装Python成功后，在命令行中运行：<code>pip3 install cup-exam</code></p></li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li><p>考试脚本需要通过<code>exam</code>命令启动</p></li><li><p>每次脚本启动时会自动更新考试信息，请务必保持互联网畅通</p></li><li><p>考试查询脚本提供GUI与非GUI两种运行方式，因此，你还可以在远程登录的服务器上进行考试查询~</p></li><li><p>示例：</p><ul><li>GUI：</li></ul><p><a href="https://vip1.loli.net/2020/02/16/UzI9aoFLyPAJNxn.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://vip1.loli.net/2020/02/16/UzI9aoFLyPAJNxn.png" class="lazyload" title></a></p><ul><li>非GUI</li></ul><p><a href="https://vip1.loli.net/2020/02/16/H3aUAzeCn9Pitml.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://vip1.loli.net/2020/02/16/H3aUAzeCn9Pitml.png" class="lazyload" title></a></p></li></ul><h3 id="提出建议与反馈BUG"><a href="#提出建议与反馈BUG" class="headerlink" title="提出建议与反馈BUG"></a>提出建议与反馈BUG</h3><ul><li>GitHub: <a href="https://github.com/Rhythmicc/" target="_blank" rel="noopener">https://github.com/Rhythmicc/</a></li><li>EMail: <a href="mailto:RhythmLian@outlook.com">RhythmLian@outlook.com</a></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python开源库文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown自动上传图床</title>
      <link href="/2020/02/14/FormatMarkdown/"/>
      <url>/2020/02/14/FormatMarkdown/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="Markdown解析图片路径、上传图床并替换路径"><a href="#Markdown解析图片路径、上传图床并替换路径" class="headerlink" title="Markdown解析图片路径、上传图床并替换路径"></a>Markdown解析图片路径、上传图床并替换路径</h1><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ul><li>首先假设你<code>hexo new title</code>了一篇文章，并写好了内容：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">![](~/img/1.png)</span><br><span class="line">![](~/img/2.png)</span><br><span class="line">![](~/img/3.png)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></div><ul><li>如果你的博客托管在GitHub上，博客的图片需要请求很久才能显示出来。这是因为上传到GitHub的图片往往需要请求海外服务器，而访问图床的通讯代价比较大。</li><li>为此，我们需要将图片放到一个高速的图床服务器上，将图片与文本分别存储在不同的服务器上。本篇博客我推荐<a href="https://sm.ms" target="_blank" rel="noopener">sm.ms</a>图床（免费）。</li></ul><h2 id="上传图片到sm-ms"><a href="#上传图片到sm-ms" class="headerlink" title="上传图片到sm.ms"></a>上传图片到sm.ms</h2><ul><li>调用sm.ms的API，并将调用结果返回</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_img</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'你的API ID'</span>,</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">'smfile'</span>: (filePath.split(<span class="string">'/'</span>)[<span class="number">-1</span>], open(filePath, <span class="string">'rb'</span>)),</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'json'</span></span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    res = requests.post(<span class="string">'https://sm.ms/api/v2/upload'</span>, headers=headers, files=data).text</span><br><span class="line">    <span class="keyword">return</span> json.loads(res)</span><br></pre></td></tr></tbody></table></figure></div><ul><li>调用成功后的返回内容：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"success"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"Upload success."</span>,</span><br><span class="line">    <span class="attr">"data"</span>: {</span><br><span class="line">        <span class="attr">"file_id"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"width"</span>: <span class="number">4677</span>,</span><br><span class="line">        <span class="attr">"height"</span>: <span class="number">3307</span>,</span><br><span class="line">        <span class="attr">"filename"</span>: <span class="string">"luo.jpg"</span>,</span><br><span class="line">        <span class="attr">"storename"</span>: <span class="string">"D5VpWCKFElUsPcR.jpg"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">801933</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/2019/12/16/D5VpWCKFElUsPcR.jpg"</span>,</span><br><span class="line">        <span class="attr">"hash"</span>: <span class="string">"Q6vLIbCGZojrMhO2e7BmgFuXRV"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://vip1.loli.net/2019/12/16/D5VpWCKFElUsPcR.jpg"</span>,</span><br><span class="line">        <span class="attr">"delete"</span>: <span class="string">"https://sm.ms/delete/Q6vLIbCGZojrMhO2e7BmgFuXRV"</span>,</span><br><span class="line">        <span class="attr">"page"</span>: <span class="string">"https://sm.ms/image/D5VpWCKFElUsPcR"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"RequestId"</span>: <span class="string">"8A84DDCA-96B3-4363-B5DF-524E95A5201A"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="解析Markdown"><a href="#解析Markdown" class="headerlink" title="解析Markdown"></a>解析Markdown</h2><h3 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aims = re.findall(<span class="string">'!\[.*?\]\((.*?)\)'</span>, markdown_content, re.M) <span class="comment"># re.M 跨行匹配</span></span><br></pre></td></tr></tbody></table></figure></div><ul><li>通过这个表达式，我们可以将文件中的所有图片路径解析出来，然后再针对每个路径计算它的绝对路径传递给<code>post_img</code>函数上传图床。</li></ul><h3 id="绝对路径获取："><a href="#绝对路径获取：" class="headerlink" title="绝对路径获取："></a>绝对路径获取：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_path</span><span class="params">(rt, rel)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> os.path.abspath(rt+rel)</span><br><span class="line"></span><br><span class="line">_user_path = os.path.expanduser(<span class="string">'~'</span>) <span class="comment"># 用户根目录</span></span><br><span class="line">rt_path = dir_char.join(os.path.abspath(filePath).split(dir_char)[:<span class="number">-1</span>]) + dir_char <span class="comment"># MarkDown所在文件夹</span></span><br><span class="line"><span class="keyword">for</span> aim <span class="keyword">in</span> aims:</span><br><span class="line">    raw_path = aim</span><br><span class="line">    aim = aim.replace(<span class="string">'~'</span>, _user_path)</span><br><span class="line">    aim = aim <span class="keyword">if</span> aim.startswith(dir_char) <span class="keyword">else</span> get_path(rt_path, aim)</span><br></pre></td></tr></tbody></table></figure></div><ul><li>此时，aim值为绝对路径</li></ul><h3 id="上传、替换与结果显示"><a href="#上传、替换与结果显示" class="headerlink" title="上传、替换与结果显示"></a>上传、替换与结果显示</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_markdown</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    _user_path = os.path.expanduser(<span class="string">'~'</span>)</span><br><span class="line">    rt_path = dir_char.join(os.path.abspath(filePath).split(dir_char)[:<span class="number">-1</span>]) + dir_char</span><br><span class="line">    tb = PrettyTable()</span><br><span class="line">    tb.field_names = [<span class="string">'File'</span>, <span class="string">'Status'</span>, <span class="string">'url'</span>]</span><br><span class="line">    img_set = {}</span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        ct = fp.read()</span><br><span class="line">    aims = re.findall(<span class="string">'!\[.*?\]\((.*?)\)'</span>, ct, re.M)</span><br><span class="line">    <span class="keyword">for</span> aim <span class="keyword">in</span> aims:</span><br><span class="line">        raw_path = aim</span><br><span class="line">        aim = aim.replace(<span class="string">'~'</span>, _user_path)</span><br><span class="line">        aim = aim <span class="keyword">if</span> aim.startswith(dir_char) <span class="keyword">else</span> get_path(rt_path, aim)</span><br><span class="line">        <span class="keyword">if</span> aim <span class="keyword">not</span> <span class="keyword">in</span> img_set:</span><br><span class="line">            res = post_img(aim)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">                tb.add_row([aim.split(dir_char)[<span class="number">-1</span>], <span class="string">'No File'</span>, <span class="string">''</span>])</span><br><span class="line">                img_set[aim] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tb.add_row([aim.split(dir_char)[<span class="number">-1</span>], res[<span class="string">'success'</span>], <span class="string">''</span> <span class="keyword">if</span> <span class="keyword">not</span> res[<span class="string">'success'</span>] <span class="keyword">else</span> res[<span class="string">'data'</span>][<span class="string">'url'</span>]])</span><br><span class="line">                img_set[aim] = res[<span class="string">'data'</span>][<span class="string">'url'</span>]</span><br><span class="line">        <span class="keyword">if</span> img_set[aim]:</span><br><span class="line">            ct = ct.replace(raw_path, img_set[aim])</span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(ct)</span><br><span class="line">    print(tb)</span><br></pre></td></tr></tbody></table></figure></div><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.platform.startswith(<span class="string">'win'</span>):</span><br><span class="line">    dir_char = <span class="string">'\\'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    dir_char = <span class="string">'/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_img</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    headers = {</span><br><span class="line">        <span class="string">'Authorization'</span>: <span class="string">'MEQCiM6viKEEF8RYPRIpOL4DA7oGtwvA'</span>,</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">'smfile'</span>: (filePath.split(<span class="string">'/'</span>)[<span class="number">-1</span>], open(filePath, <span class="string">'rb'</span>)),</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'json'</span></span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    res = requests.post(<span class="string">'https://sm.ms/api/v2/upload'</span>, headers=headers, files=data).text</span><br><span class="line">    <span class="keyword">return</span> json.loads(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_path</span><span class="params">(rt, rel)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> os.path.abspath(rt+rel)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_markdown</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    _user_path = os.path.expanduser(<span class="string">'~'</span>)</span><br><span class="line">    rt_path = dir_char.join(os.path.abspath(filePath).split(dir_char)[:<span class="number">-1</span>]) + dir_char</span><br><span class="line">    tb = PrettyTable()</span><br><span class="line">    tb.field_names = [<span class="string">'File'</span>, <span class="string">'Status'</span>, <span class="string">'url'</span>]</span><br><span class="line">    img_set = {}</span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        ct = fp.read()</span><br><span class="line">    aims = re.findall(<span class="string">'!\[.*?\]\((.*?)\)'</span>, ct, re.M)</span><br><span class="line">    <span class="keyword">for</span> aim <span class="keyword">in</span> aims:</span><br><span class="line">        raw_path = aim</span><br><span class="line">        aim = aim.replace(<span class="string">'~'</span>, _user_path)</span><br><span class="line">        aim = aim <span class="keyword">if</span> aim.startswith(dir_char) <span class="keyword">else</span> get_path(rt_path, aim)</span><br><span class="line">        <span class="keyword">if</span> aim <span class="keyword">not</span> <span class="keyword">in</span> img_set:</span><br><span class="line">            res = post_img(aim)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">                tb.add_row([aim.split(dir_char)[<span class="number">-1</span>], <span class="string">'No File'</span>, <span class="string">''</span>])</span><br><span class="line">                img_set[aim] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tb.add_row([aim.split(dir_char)[<span class="number">-1</span>], res[<span class="string">'success'</span>], <span class="string">''</span> <span class="keyword">if</span> <span class="keyword">not</span> res[<span class="string">'success'</span>] <span class="keyword">else</span> res[<span class="string">'data'</span>][<span class="string">'url'</span>]])</span><br><span class="line">                img_set[aim] = res[<span class="string">'data'</span>][<span class="string">'url'</span>]</span><br><span class="line">        <span class="keyword">if</span> img_set[aim]:</span><br><span class="line">            ct = ct.replace(raw_path, img_set[aim])</span><br><span class="line">    <span class="keyword">with</span> open(filePath, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(ct)</span><br><span class="line">    print(tb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    format_markdown(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure></div><h3 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sh</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ImgBed.py [Markdown file path]</span><br></pre></td></tr></tbody></table></figure></div></body></html>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuickStart-Rhy</title>
      <link href="/2020/02/14/QuickStart-Rhy/"/>
      <url>/2020/02/14/QuickStart-Rhy/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="QuickStart"><a href="#QuickStart" class="headerlink" title="QuickStart"></a>QuickStart</h1><h2 id="Use-QuickStart-to-simplify-the-operation-in-terminal"><a href="#Use-QuickStart-to-simplify-the-operation-in-terminal" class="headerlink" title="Use QuickStart to simplify the operation in terminal!"></a>Use QuickStart to simplify the operation in terminal!</h2><table><thead><tr><th align="left">Command</th><th align="left">Means</th></tr></thead><tbody><tr><td align="left"><code>qs -u [url]</code></td><td align="left">open url using default browser</td></tr><tr><td align="left"><code>qs -a [app/(file...)]</code></td><td align="left">open app or open file by app(for MacOS X)</td></tr><tr><td align="left"><code>qs -f [file...]</code></td><td align="left">open file by default app</td></tr><tr><td align="left"><code>qs -trans [words]</code></td><td align="left">translate the content of <code>[words]</code> or the content in clipboard</td></tr><tr><td align="left"><code>qs -time</code></td><td align="left">view current time</td></tr><tr><td align="left"><code>qs -ftp</code></td><td align="left">start a simple ftp server</td></tr><tr><td align="left"><code>qs -top</code></td><td align="left">cpu and memory monitor</td></tr><tr><td align="left"><code>qs -weather [address]</code></td><td align="left">check weather (of address)</td></tr><tr><td align="left"><code>qs -dl [urls/""]</code></td><td align="left">download file from url(in clipboard)</td></tr><tr><td align="left"><code>qs -mktar [path]</code></td><td align="left">create gzipped archive for path(dir/file)</td></tr><tr><td align="left"><code>qs -untar [path]</code></td><td align="left">extract path.tar.*</td></tr><tr><td align="left"><code>qs -mkzip [path]</code></td><td align="left">make a zip for path(dir/file)</td></tr><tr><td align="left"><code>qs -unzip [path]</code></td><td align="left">unzip path.zip</td></tr><tr><td align="left"><code>qs -upload</code></td><td align="left">upload your pypi library</td></tr><tr><td align="left"><code>qs -upgrade</code></td><td align="left">update qs</td></tr><tr><td align="left"><code>qs -pyuninstaller [name]</code></td><td align="left">remove files that pyinstaller create</td></tr></tbody></table><p>(By the way, if you are the one of China University Of Petroleum(Beijing), run <code>qs -i</code> to login school network)</p><h2 id="Some-tools-for-Windows-user-to-normally-use-qs"><a href="#Some-tools-for-Windows-user-to-normally-use-qs" class="headerlink" title="Some tools for Windows user to normally use qs"></a>Some tools for Windows user to normally use qs</h2><ul><li><p>almost have installed automatically by system on Linux/MacOS X</p><p><a href="http://gnuwin32.sourceforge.net/packages/gtar.htm" target="_blank" rel="noopener">tar</a></p><p><a href="http://gnuwin32.sourceforge.net/packages/zip.htm" target="_blank" rel="noopener">zip</a></p><p><a href="http://gnuwin32.sourceforge.net/packages/unzip.htm" target="_blank" rel="noopener">unzip</a></p></li></ul></body></html>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python开源库文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuickProject</title>
      <link href="/2020/02/14/QuickProject/"/>
      <url>/2020/02/14/QuickProject/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h1 id="QuickProject"><a href="#QuickProject" class="headerlink" title="QuickProject"></a>QuickProject</h1><p><a href><img alt data-src="https://img.shields.io/badge/version-0.6.3.3-green" class="lazyload"></a> <a href><img alt data-src="https://img.shields.io/badge/Author-RhythmLian-blue" class="lazyload"></a></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Qpro基于<code>python3</code>,</li><li>请确保电脑在拥有Python环境的同时, 至少安装一套<code>其他要使用的语言</code>环境.</li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>提供脚本在命令行里高效<strong>运行项目</strong>。</li><li>提供<strong>模板管理器</strong>，轻松将代码保存和导出。</li><li>提供<strong>对拍器</strong>，轻松进行程序输出结果的对拍或进行文本文件的对比。</li></ul><h3 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h3><ul><li><p><strong>Qpro对CLion的特殊支持: 在CLion项目中，Qpro可以自动将其初始化为Qpro项目</strong></p></li><li><p><strong>Qpro现内置<code>c</code>,<code>cpp</code>, <code>java</code>, <code>python2@3</code>的支持。你可以使用<code>Qpro -c</code>创建相应项目</strong></p></li><li><p><strong>Qpro远程映射支持ipv6</strong></p></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h2><ul><li><code>pip3 install Qpro [--upgrade]</code></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h2><table><thead><tr><th align="left">Command</th><th align="left">Result</th></tr></thead><tbody><tr><td align="left"><code>Qpro -init</code></td><td align="left">将当前文件夹初始化为Qpro项目</td></tr><tr><td align="left"><code>Qpro -h</code></td><td align="left">查看帮助</td></tr><tr><td align="left"><code>Qpro -c project</code></td><td align="left">创建一个Qpro项目</td></tr><tr><td align="left"><code>Qpro -update</code></td><td align="left">更新Qpro</td></tr><tr><td align="left"><code>Qpro -adjust</code></td><td align="left">修改配置表</td></tr><tr><td align="left"><code>Qpro -ssh</code></td><td align="left">进入服务器Qpro项目位置</td></tr><tr><td align="left"><code>Qpro -scp path</code></td><td align="left">将项目内文件夹或文件上传到默认服务器</td></tr><tr><td align="left"><code>Qpro -scp-init</code></td><td align="left">将整个项目上传到默认服务器</td></tr><tr><td align="left"><code>Qpro -get path</code></td><td align="left">从服务器上拉取项目内文件</td></tr><tr><td align="left"><code>Qpro -del path</code></td><td align="left">从Qpro项目中删除文件(夹)</td></tr><tr><td align="left"><code>Qpro -del-all</code></td><td align="left">删除整个项目</td></tr><tr><td align="left"><code>Qpro -ls path</code></td><td align="left">查看远程映射上的文件</td></tr><tr><td align="left"><code>tmpm *</code></td><td align="left">调用<a href="#模板脚本">模板脚本</a>，刷新项目中的默认源文件</td></tr><tr><td align="left"><code>qrun *</code></td><td align="left">使用<a href="#运行脚本">运行脚本</a>运行你的项目，Windows(<code>qrun</code>)</td></tr><tr><td align="left"><code>detector [-[p/f][p/f]]</code></td><td align="left">运行<a href="#对拍器">对拍器</a>（对拍器只能在<code>Qpro -init</code>后的文件夹下运行）</td></tr></tbody></table><ul><li>初始化后的项目，可以手动编辑配置表<code>project_configure.csv</code>来调整配置。</li><li>支持<code>C/CPP</code>但不止于<code>C/CPP</code>，理论上你可以使用Qpro运行任何语言项目。</li></ul><h3 id="配置表"><a href="#配置表" class="headerlink" title="配置表"></a>配置表</h3><ul><li><p>修改<code>project_configure.csv</code>来调整脚本默认配置</p><table><thead><tr><th align="left">键值</th><th align="left">含义</th><th align="left">默认</th></tr></thead><tbody><tr><td align="left"><code>compile_tool</code></td><td align="left">(编译工具, 编译后缀)</td><td align="left">(gcc, ‘’) / (g++, ‘’) / …</td></tr><tr><td align="left"><code>compile_filename</code></td><td align="left">待编译的文件</td><td align="left">main.cpp / main.c</td></tr><tr><td align="left"><code>executable_filename</code></td><td align="left">编译出的可执行文件名</td><td align="left">项目名</td></tr><tr><td align="left"><code>input_file</code></td><td align="left">默认的输入文件</td><td align="left"><code>./cmake-build-debug/input.txt</code></td></tr><tr><td align="left"><code>template_root</code></td><td align="left">默认的模板库根目录</td><td align="left"><code>template/</code></td></tr><tr><td align="left"><code>server_target</code></td><td align="left">默认的服务器映射位置</td><td align="left">空/<code>user@ip:dir_path/</code></td></tr></tbody></table></li><li><p>运行<code>Qpro -adjust</code>修改配置表:<br><a href="https://vip1.loli.net/2020/02/14/1C8NMq7eQ5PVxIX.png" data-fancybox="group" data-caption="GUI" class="fancybox"><img alt="GUI" data-src="https://vip1.loli.net/2020/02/14/1C8NMq7eQ5PVxIX.png" class="lazyload" title="GUI"></a></p></li></ul><h3 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本:"></a>运行脚本:</h3><ul><li><p>编译或运行</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">编译</td></tr><tr><td align="left">-r</td><td align="left">运行</td></tr><tr><td align="left">-br</td><td align="left">编译且运行</td></tr></tbody></table><p>  如果上述三个命令都不存在，则默认运行当前编译好的程序</p><table><thead><tr><th align="left">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-f <code>*.c</code> / <code>*.cpp</code></td><td align="left">设置目标源文件为<code>*.c</code> / <code>*.cpp</code></td></tr></tbody></table></li><li><p>输入输出:</p><ul><li><p>可以编辑 <strong>默认的输入文件</strong> 来设置默认输入</p></li><li><p>运行 <code>qrun [...] > output.txt</code> 使程序输出到 <code>./output.txt</code></p><table><thead><tr><th align="left">参数</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left">-i</td><td align="left">使用<strong>默认的输入文件</strong>作为输入</td></tr><tr><td align="left">-if <code>*.*</code></td><td align="left">更改输入文件</td></tr><tr><td align="left">-if -paste</td><td align="left">使用粘贴板内容作为输入</td></tr></tbody></table></li></ul></li><li><p><strong><em>程序的额外命令行参数:</em></strong></p><ul><li><strong><em>所有未被run命令匹配的参数都将按顺序传递给源程序。</em></strong></li></ul></li><li><p>查看帮助</p><ul><li><code>qrun -h</code> : 可以查看使用帮助(Windows系统不支持颜色显示)<br><a href="https://vip1.loli.net/2020/02/14/LxFcm8yf2PYVCqR.png" data-fancybox="group" data-caption="help" class="fancybox"><img alt="help" data-src="https://vip1.loli.net/2020/02/14/LxFcm8yf2PYVCqR.png" class="lazyload" title="help"></a></li></ul></li><li><p>推荐的命令示例:</p><table><thead><tr><th align="left">命令</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left"><code>qrun -i</code></td><td align="left">使用默认输入文件并运行</td></tr><tr><td align="left"><code>qrun</code></td><td align="left">运行</td></tr><tr><td align="left"><code>qrun -br -i</code></td><td align="left">编译且使用输入文件运行</td></tr></tbody></table></li></ul><h3 id="模板脚本"><a href="#模板脚本" class="headerlink" title="模板脚本:"></a>模板脚本:</h3><ul><li><p>使用</p><table><thead><tr><th align="left">命令</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left"><code>tmpm -h</code></td><td align="left">查看帮助</td></tr><tr><td align="left"><code>tmpm -r</code></td><td align="left">选择备份并恢复</td></tr><tr><td align="left"><code>tmpm -r backup</code></td><td align="left">恢复为<code>template/backup</code></td></tr><tr><td align="left"><code>tmpm -c backup</code></td><td align="left">创建或覆盖<code>template/backup</code></td></tr><tr><td align="left"><code>tmpm -c template algorithm</code></td><td align="left">拷贝指定位置, 创建模板集并写入算法</td></tr><tr><td align="left"><code>tmpm -a template algorithm</code></td><td align="left">拷贝指定位置, 向模板集追加算法</td></tr><tr><td align="left"><code>tmpm name</code></td><td align="left">在<code>/// __TEMPLATE__</code>处插入<code>name</code>模板集内的模板</td></tr></tbody></table></li><li><p>关于指定位置: <code>tmpm</code> 将会把<code>compile_filename</code>中处于<code>/// __START__</code>和<code>/// __END__</code>之间的内容识别, 并拷贝</p></li></ul><h3 id="对拍器"><a href="#对拍器" class="headerlink" title="对拍器"></a>对拍器</h3><ul><li>使用: <code>detector</code> 来进行两个源程序运行结果的对拍，结果存储在当前目录下的<code>./res.html</code>。</li></ul><table><thead><tr><th align="left">命令</th><th align="left">效果</th></tr></thead><tbody><tr><td align="left"><code>detector (-pp)</code></td><td align="left">打开默认对拍器(<code>文件1</code>与<code>文件2</code>都是程序)</td></tr><tr><td align="left"><code>detector -pf</code></td><td align="left">运行<code>文件1</code>程序并将结果与<code>文件2</code>对比</td></tr><tr><td align="left"><code>detector -fp</code></td><td align="left">运行<code>文件2</code>程序并将结果与<code>文件1</code>对比</td></tr><tr><td align="left"><code>detector -ff</code></td><td align="left">对比<code>文件1</code>与<code>文件2</code>的内容(你可以在任何位置调用)</td></tr><tr><td align="left">- 如果脚本未能自动打开<code>./res.html</code>, 你可以用浏览器打开它。</td><td align="left"></td></tr></tbody></table><p><a href="https://vip1.loli.net/2020/02/14/DNyM2xvghF6us1w.png" data-fancybox="group" data-caption="GUI" class="fancybox"><img alt="GUI" data-src="https://vip1.loli.net/2020/02/14/DNyM2xvghF6us1w.png" class="lazyload" title="GUI"></a></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python开源库文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱你~！</title>
      <link href="/2020/02/14/MyLove/"/>
      <url>/2020/02/14/MyLove/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="今天是情人节喔！"><a href="#今天是情人节喔！" class="headerlink" title="今天是情人节喔！"></a>今天是情人节喔！</h2><ul><li>哞~！<br><a href="https://i.loli.net/2020/02/14/G7qMocmNSVyj9TA.jpg" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://i.loli.net/2020/02/14/G7qMocmNSVyj9TA.jpg" class="lazyload" title></a></li></ul><h2 id="要长长久久"><a href="#要长长久久" class="headerlink" title="要长长久久~"></a>要长长久久~</h2></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/13/hello-world/"/>
      <url>/2020/02/13/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
